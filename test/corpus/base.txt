==================
Record
==================
record Position()
---
(source_file
    (record
       (type_identifier)))

==================
Record with Generics
==================

record Position [A, B](line: List[A], col: Int, index: Int)

---

 (source_file
      (record
        (type_identifier)
        (type_parameters
          (generic_identifier)
          (generic_identifier))
        (parameters
          (parameter
            (identifier)
            (parameter_type
              (type_identifier)
              (generic_identifier)))
          (parameter
            (identifier)
            (parameter_type
              (type_identifier)))
          (parameter
            (identifier)
            (parameter_type
              (type_identifier))))))

==================
Simple Type
==================

type Locations = List[SomeLocation]

---

    (source_file
      (type
        (type_identifier)
        (parameter_type
          (type_identifier)
          (generic_identifier))))
==================
Type
==================
type List {}

---
(source_file
  (type
    (type_identifier)))

==================
Type with Generics
==================

type List[A] {
  Nil();
  Cons(head: A, tail: List[A])
}

---

(source_file
  (type
    (type_identifier)
    (type_parameters
        (generic_identifier))
    (type_members
        (type_member
            (type_identifier))
        (type_member
            (type_identifier)
            (parameters
                (parameter
                    (identifier)
                    (parameter_type
                        (type_identifier)))
                (parameter
                    (identifier)
                    (parameter_type
                        (type_identifier)
                        (generic_identifier)
                    )
                )
            )
        )
    )
))

==================
Empty Function
==================

def foo() = {}

---
(source_file
    (function
         (identifier)
         (block)
     )
)

==================
Function
==================

def add(a: Int, b: Int) = {}

---
(source_file
   (function
       (identifier)
       (parameters
           (parameter
                (identifier)
                (parameter_type
                    (type_identifier)))
            (parameter
                (identifier)
                (parameter_type
                    (type_identifier)))
        )
         (block)
    )
)

==================
Interface
==================
interface FileNotFound {
  def FileNotFound(path: String): Unit
}

---

 (source_file
      (interface
        (type_identifier)
        (interface_methods
          (interface_method
            (identifier)
            (parameters
              (parameter
                (identifier)
                (parameter_type
                  (type_identifier))))
            (return_type
              (type_identifier))))))


==================
Interface with Generics
==================

interface Net {
  def send[A, L](value: A, receiver: Location[L]): Unit / { IO }
  def recv[A, L](receiver: Location[L]): A / { IO, SomeError }
}

---
  (source_file
      (interface
        (type_identifier)
        (interface_methods
          (interface_method
            (identifier)
            (type_parameters
              (generic_identifier)
              (generic_identifier))
            (parameters
              (parameter
                (identifier)
                (parameter_type
                  (type_identifier)))
              (parameter
                (identifier)
                (parameter_type
                  (type_identifier)
                  (generic_identifier))))
            (return_type
              (type_identifier)
              (effekts
                (type_identifier))))
          (interface_method
            (identifier)
            (type_parameters
              (generic_identifier)
              (generic_identifier))
            (parameters
              (parameter
                (identifier)
                (parameter_type
                  (type_identifier)
                  (generic_identifier))))
            (return_type
              (type_identifier)
              (effekts
                (type_identifier)
                (type_identifier)))))))


==================
Effect alias
==================
effect IO = { Read, Write }

---
(source_file
      (effect_alias
        (identifier)
         (parameter_type
          (type_identifier))
        (parameter_type
          (type_identifier))))


==================
Effect alias with Generics
==================

effect IO[A] = { Read, Write[A] }

---
 (source_file
      (effect_alias
        (identifier)
        (type_parameters
          (generic_identifier))
        (parameter_type
          (type_identifier))
        (parameter_type
          (type_identifier)
          (generic_identifier))))

==================
Effect
==================

effect DefaultIndent(): Int

---
(source_file
      (effect
        (identifier)
        (return_type
          (type_identifier))))

==================
Complex Effekt
==================

effect FileNotFound[A](path: String, msg: A): Unit

---

 (source_file
      (effect
        (identifier)
        (type_parameters
          (generic_identifier))
        (parameters
          (parameter
            (identifier)
            (parameter_type
              (type_identifier)))
          (parameter
            (identifier)
            (parameter_type
              (type_identifier))))
        (return_type
          (type_identifier))))
