==================
Record
==================
record Position()
---
(source_file
    (record
       (parameter_type
         (type_identifier))))

==================
Record with Generics
==================

record Position [A, B](line: List[A], col: Int, index: Int)

---

 (source_file
      (record
       (parameter_type
        (type_identifier)
          (generic_identifier)
          (generic_identifier))
        (parameters
          (parameter
            (identifier)
            (parameter_type
              (type_identifier)
              (generic_identifier)))
          (parameter
            (identifier)
            (parameter_type
              (type_identifier)))
          (parameter
            (identifier)
            (parameter_type
              (type_identifier))))))

==================
Simple Type
==================

type Locations = List[SomeLocation]

---

    (source_file
      (type
        (parameter_type
        (type_identifier))
        (parameter_type
          (type_identifier)
          (generic_identifier))))
==================
Type
==================
type List {}

---
(source_file
  (type
    (parameter_type
    (type_identifier))))

==================
Type with Generics
==================

type List[A] {
  Nil();
  Cons(head: A, tail: List[A])
}

---

(source_file
  (type
    (parameter_type
    (type_identifier)
    (generic_identifier))
    (type_members
        (type_member
            (type_identifier))
        (type_member
            (type_identifier)
            (parameters
                (parameter
                    (identifier)
                    (parameter_type
                        (type_identifier)))
                (parameter
                    (identifier)
                    (parameter_type
                        (type_identifier)
                        (generic_identifier)
                    )
                )
            )
        )
    )
))

==================
Not implemente Function
==================
def foo() = <>
---
(source_file
    (function
         (identifier)
            (not_implemented)
     )
)

==================
Empty Function
==================

def foo() = {}

---
(source_file
    (function
         (identifier)
         (block)
     )
)

==================
Function
==================

def add(a: Int, b: Int) = {}

---
(source_file
   (function
       (identifier)
       (parameters
           (parameter
                (identifier)
                (parameter_type
                    (type_identifier)))
            (parameter
                (identifier)
                (parameter_type
                    (type_identifier)))
        )
         (block)
    )
)

==================
Interface
==================
interface FileNotFound {
  def FileNotFound(path: String): Unit
}

---

 (source_file
      (interface
        (parameter_type
        (type_identifier))
        (interface_methods
          (interface_method
            (identifier)
            (parameters
              (parameter
                (identifier)
                (parameter_type
                  (type_identifier))))
            (return_type
               (parameter_type
                (type_identifier)))))))


==================
Interface with Generics
==================

interface Net[A,L] {
  def send[A, L](value: A, receiver: Location[L]): Unit / { IO }
  def recv[A, L](receiver: Location[L]): A / { IO, SomeError }
}
---
  (source_file
      (interface
        (parameter_type
           (type_identifier)
             (generic_identifier)
             (generic_identifier))
        (interface_methods
          (interface_method
            (identifier)
              (generic_identifier)
              (generic_identifier)
            (parameters
              (parameter
                (identifier)
                (parameter_type
                  (type_identifier)))
              (parameter
                (identifier)
                (parameter_type
                  (type_identifier)
                  (generic_identifier))))
            (return_type
               (parameter_type
                (type_identifier))
              (effects
                (type_identifier))))
          (interface_method
            (identifier)
              (generic_identifier)
              (generic_identifier)
            (parameters
              (parameter
                (identifier)
                (parameter_type
                  (type_identifier)
                  (generic_identifier))))
            (return_type
                (parameter_type
                (type_identifier))
              (effects
                (type_identifier)
                (type_identifier)))))))


==================
Effect alias
==================
effect IO = { Read, Write }

---
(source_file
      (effect_alias
       (parameter_type
        (type_identifier))
         (parameter_type
          (type_identifier))
        (parameter_type
          (type_identifier))))


==================
Effect alias with Generics
==================

effect IO[A] = { Read, Write[A] }

---
 (source_file
      (effect_alias
       (parameter_type
        (type_identifier)
          (generic_identifier))
        (parameter_type
          (type_identifier))
        (parameter_type
          (type_identifier)
          (generic_identifier))))

==================
Effect
==================

effect DefaultIndent(): Int

---
(source_file
      (effect
      (parameter_type
        (type_identifier))
        (return_type
           (parameter_type
            (type_identifier)))))

==================
Complex Effekt
==================

effect FileNotFound[A](path: String, msg: A): Unit

---

 (source_file
      (effect
      (parameter_type
        (type_identifier)
          (generic_identifier))
        (parameters
          (parameter
            (identifier)
            (parameter_type
              (type_identifier)))
          (parameter
            (identifier)
            (parameter_type
              (type_identifier))))
        (return_type
          (parameter_type
            (type_identifier)))))


==================
Simple Addition
==================
def add2(a: Int) = a + 2
---
 (source_file
      (function
        (identifier)
        (parameters
          (parameter
            (identifier)
            (parameter_type
              (type_identifier))))
        (binary_expression
          (identifier)
          (number))))
==================
Simple Multiplication
==================
def mult2(a: Int)   = a * 2

---
 (source_file
      (function
        (identifier)
        (parameters
          (parameter
            (identifier)
            (parameter_type
              (type_identifier))))
        (binary_expression
          (identifier)
          (number))))

==================
Boolean
==================

def isTrue() = true

---
(source_file
   (function
       (identifier)
       (boolean)))


==================
Function precedence
==================

def foo() = {
   val x = println(1)
}

---
 (source_file
      (function
        (identifier)
        (block
          (statement
            (assignment
              (identifier)
              (function_call
                (identifier)
                (argument
                  (number))))))))


==================
Constructor assignment
==================

def foo() = {
   val x = A()
}

---
    (source_file
      (function
        (identifier)
        (block
          (statement
            (assignment
              (identifier)
              (constructor
                (type_identifier)))))))

==================
do SomeEffect
==================

def foo(): Unit / {SomeEffect} = {
   do SomeEffect()
}

---
  (source_file
      (function
        (identifier)
        (return_type
          (parameter_type
            (type_identifier))
          (effects
            (type_identifier)))
        (block
          (statement
            (expression_statement
              (unary_expression
                (constructor
                  (type_identifier))))))))

==================
Simple matching
==================
def foo(x: Int) = {
    l match {
        case 1 => true
        case 2 => false
    }
}

---

(source_file
      (function
        (identifier)
        (parameters
          (parameter
            (identifier)
            (parameter_type
              (type_identifier))))
        (block
          (statement
            (expression_statement
              (match_expression
                (identifier)
                (case_clause
                  (number)
                  (boolean))
                (case_clause
                  (number)
                  (boolean))))))))

==================
Tuple matching
==================
def foo(x: Int, y: Int) = {
    (x,y) match {
        case (1, 2) => true
        case (2, 3) => false
    }
}
---
(source_file
      (function
        (identifier)
        (parameters
          (parameter
            (identifier)
            (parameter_type
              (type_identifier)))
          (parameter
            (identifier)
            (parameter_type
              (type_identifier))))
        (block
          (statement
            (expression_statement
              (match_expression
                (tuple_expression
                  (identifier)
                  (identifier))
                (case_clause
                  (tuple_pattern
                    (number)
                    (number))
                  (boolean))
                (case_clause
                  (tuple_pattern
                    (number)
                    (number))
                  (boolean))))))))

==================
Tuple function argument
==================

def foo(x: (Int, Int)) = <>

---

(source_file
      (function
        (identifier)
        (parameters
          (parameter
            (identifier)
            (tuple_parameter_type
              (parameter_type
                (type_identifier))
              (parameter_type
                (type_identifier)))))
        (not_implemented)))

==================
try with handler function and resume
==================

def foo() = {
    try {
       bar()
    } with Effect {
        def baz(msg, it) = resume(it)
     }
}

---
 (source_file
      (function
        (identifier)
        (block
          (statement
            (expression_statement
              (try_expression
                (block
                  (statement
                    (expression_statement
                      (function_call
                        (identifier)))))
                (with_handler
                  (parameter_type
                    (type_identifier))
                  (handler_function
                    (identifier)
                    (handler_function_parameters
                      (identifier)
                      (identifier))
                       (resume
                      (identifier))))))))))
==================
try with annonymous handler function
==================
def foo() = {
    try {
    meanRatio(4.2, 1.3)
    } with Exc {
       (msg) =>  println(msg)
    }
}

---

(source_file
      (function
        (identifier)
        (block
          (statement
            (expression_statement
              (try_expression
                (block
                  (statement
                    (expression_statement
                      (function_call
                        (identifier)
                        (argument
                          (number))
                        (argument
                          (number))))))
                (with_handler
                  (parameter_type
                    (type_identifier))
                  (anonymous_function
                    (handler_function_parameters
                      (identifier))
                    (function_call
                      (identifier)
                      (argument
                        (identifier)))))))))))

==================
Pre-arg function call
==================

def foo(x: Double) = {
    x.ceil
}

---

(source_file
      (function
        (identifier)
        (parameters
          (parameter
            (identifier)
            (parameter_type
              (type_identifier))))
        (block
          (statement
            (expression_statement
              (call_chain
                (identifier)
                (pre_arg_function_call
                  (identifier))))))))
