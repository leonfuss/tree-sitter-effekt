==================
Record
==================
record Position()
---

(source_file
  (record_item
    name: (type_identifier)
    body: (field_item_list)))

==================
Record with Generics
==================

record Position [A, B](line: List[A], col: Int, index: Int)

---

(source_file
  (record_item
    name: (type_identifier)
    type_parameters: (type_parameters
        (type_identifier)
        (type_identifier))
    body: (field_item_list
        (field_declaration
            name: (field_identifier)
            type: (generic_type
                (type_identifier)
                 type_arguments: (type_arguments
                    (type_identifier))))
        (field_declaration
            name: (field_identifier)
            type: (primitive_type))
        (field_declaration
            name: (field_identifier)
            type: (primitive_type)))))

==================
Simple Type
==================

type Locations = List[SomeLocation]

---
(source_file
    (type_item
        name: (type_identifier)
        assignment: (type_assignment
            (generic_type
                (type_identifier)
                 type_arguments: (type_arguments
                    (type_identifier))))))
==================
Type
==================
type List {}


---
(source_file
  (type_item
    name: (type_identifier)
    body: (type_variant_list)))

==================
Type with Generics
==================

type List[A] {
  Nil();
  Cons(head: A, tail: List[A])
}

---

(source_file
    (type_item
        name: (type_identifier)
        type_parameters: (type_parameters
            (type_identifier))
        body: (type_variant_list
            (type_variant
                name: (type_identifier)
                body: (field_item_list))
            (type_variant
                name: (type_identifier)
                body: (field_item_list
                    (field_declaration
                        name: (field_identifier)
                        type: (type_identifier))
                    (field_declaration
                        name: (field_identifier)
                        type: (generic_type
                            (type_identifier)
                                type_arguments: (type_arguments
                                    (type_identifier)))))))))

==================
Import statements
==================
import mutable/list
import list
---
(source_file
    (import_declaration
        path: (path
            (path_segment)
            (path_segment)))
    (import_declaration
        path: (path
            (path_segment))))

==================
Not implemente Function
==================
def foo() = <>
---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters)
        body: (expression_statement
            (hole))))

==================
Empty Function
==================

def foo() = {}

---

(source_file
    (function_item
        name: (identifier)
        parameters: (parameters)
        body: (expression_statement
            (block))))

==================
Function
==================

def add(a: Int, b: Int) = {}

---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters
            (parameter
                pattern: (identifier)
                type: (primitive_type))
            (parameter
                pattern: (identifier)
                type: (primitive_type)))
        body: (expression_statement
            (block))))

==================
Interface
==================
interface FileNotFound {
  def FileNotFound(path: String): Unit
}

---
(source_file
    (interface_item
        name: (type_identifier)
        body: (declaration_list
            (function_item
                name: (identifier)
                parameters: (parameters
                    (parameter
                        pattern: (identifier)
                        type: (primitive_type)))
                return_type: (return_type
                    type: (primitive_type))))))

==================
Interface with Generics
==================

interface Net[A,L] {
  def send[A, L](value: A, receiver: Location[L]): Unit / { IO }
  def recv[A, L](receiver: Location[L]): A / { IO, SomeError }
}
---

(source_file
    (interface_item
        name: (type_identifier)
        type_parameters: (type_parameters
            (type_identifier)
            (type_identifier))
        body: (declaration_list
            (function_item
                name: (identifier)
                type_parameters: (type_parameters
                    (type_identifier)
                    (type_identifier))
                parameters: (parameters
                    (parameter
                        pattern: (identifier)
                        type: (type_identifier))
                    (parameter
                        pattern: (identifier)
                        type: (generic_type
                            (type_identifier)
                            type_arguments: (type_arguments
                                (type_identifier)))))
                return_type: (return_type
                    type: (primitive_type)
                    effects: (effects
                        (effect
                            (type_identifier)))))
            (function_item
                name: (identifier)
                type_parameters: (type_parameters
                    (type_identifier)
                    (type_identifier))
                parameters: (parameters
                    (parameter
                        pattern: (identifier)
                        type: (generic_type
                            (type_identifier)
                            type_arguments: (type_arguments
                                (type_identifier)))))
                return_type: (return_type
                    type: (type_identifier)
                    effects: (effects
                        (effect
                            (type_identifier))
                        (effect
                            (type_identifier))))))))

==================
Effect alias
==================
effect IO = { Read, Write }

---

(source_file
    (effect_item
        name: (type_identifier)
        alias: (effect_alias_list
            (effect_alias
                (type_identifier))
            (effect_alias
                (type_identifier)))))


==================
Effect alias with Generics
==================

effect IO[A] = { Read, Write[A] }

---
 (source_file
    (effect_item
        name: (type_identifier)
        type_parameters: (type_parameters
            (type_identifier))
        alias: (effect_alias_list
            (effect_alias
                (type_identifier))
            (effect_alias
                (generic_type
                    (type_identifier)
                type_arguments: (type_arguments
                    (type_identifier)))))))

==================
Effect
==================

effect DefaultIndent(): Int

---
(source_file
    (effect_item
        name: (type_identifier)
        parameters: (parameters)
        return_type: (return_type
            type: (primitive_type))))

==================
Effekt with Generics
==================

effect FileNotFound[A](path: String, msg: A): Unit

---

(source_file
    (effect_item
        name: (type_identifier)
        type_parameters: (type_parameters
            (type_identifier))
        parameters: (parameters
            (parameter
                pattern: (identifier)
                type: (primitive_type))
            (parameter
                pattern: (identifier)
                type: (type_identifier)))
        return_type: (return_type
            type: (primitive_type))))

==================
val declaration
==================
val y = <>

---
(source_file
    (val_declaration
        name: (identifier)
        value: (hole)))

==================
Simple Addition
==================

def add2(a: Int) = a + 2
---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters
            (parameter
                pattern: (identifier)
                type: (primitive_type)))
        body: (expression_statement
            (binary_expression
                left: (identifier)
                right: (integer_literal)))))

==================
Simple Multiplication
==================
def mult2(a: Int)   = a * 2

---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters
            (parameter
                pattern: (identifier)
                type: (primitive_type)))
        body: (expression_statement
            (binary_expression
                left: (identifier)
                right: (integer_literal)))))

==================
Boolean
==================

def isTrue() = true

---
(source_file
   (function_item
        name: (identifier)
        parameters: (parameters)
        body: (expression_statement
            (boolean_literal))))


==================
Function precedence
==================

def foo() = {
   val x = println(1)
}

---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters)
        body: (expression_statement
            (block
                (val_declaration
                    name: (identifier)
                    value: (call_expression
                        function: (identifier)
                            arguments: (arguments
                                (integer_literal))))))))


==================
Constructor assignment
==================

def foo() = {
   val x = A()
}

---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters)
        body: (expression_statement
            (block
                (val_declaration
                    name: (identifier)
                    value: (call_expression
                        function: (identifier)
                            arguments: (arguments)))))))

==================
do SomeEffect
==================

def foo(): Unit / {SomeEffect} = {
   do SomeEffect()
}

---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters)
        return_type: (return_type
            type: (primitive_type)
            effects: (effects
                (effect
                    (type_identifier))))
        body: (expression_statement
            (block
                (expression_statement
                    (do_expression
                        (Construction
==================
Simple matching
==================
def foo(x: Int) = {
    l match {
        case 1 => true
        case 2 => false
    }
}

---

 (source_file
    (function_item
        name: (identifier)
        parameters: (parameters
            (parameter
                pattern: (identifier)
                type: (primitive_type)))
        body: (expression_statement
            (block
                (expression_statement
                    (match_expression
                        value: (identifier)
                        body: (match_block
                            (match_arm
                                pattern: (match_pattern
                                    (integer_literal))
                                value: (boolean_literal))
                            (match_arm
                                pattern: (match_pattern
                                    (integer_literal))
                                value: (boolean_literal)))))))))

==================
Tuple matching
==================
def foo(x: Int, y: Int) = {
    (x,y) match {
        case (1, 2) => true
        case (2, 3) => false
    }
}
---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters
            (parameter
                pattern: (identifier)
                type: (primitive_type))
            (parameter
                pattern: (identifier)
                type: (primitive_type)))
        body: (expression_statement
            (block
                (expression_statement
                    (match_expression
                        value: (tuple_expression
                            (identifier)
                            (identifier))
                        body: (match_block
                            (match_arm
                                pattern: (match_pattern
                                    (tuple_pattern
                                        (integer_literal)
                                        (integer_literal)))
                                value: (boolean_literal))
                            (match_arm
                                pattern: (match_pattern
                                (tuple_pattern
                                    (integer_literal)
                                    (integer_literal)))
                                value: (boolean_literal)))))))))

==================
Tuple function argument
==================

def foo(x: (Int, Int)) = <>

---

(source_file
    (function_item
        name: (identifier)
        parameters: (parameters
            (parameter
                pattern: (identifier)
                type: (tuple_type
                    (primitive_type)
                    (primitive_type))))
        body: (expression_statement
            (hole))))

==================
try with handler function and resume
==================

def foo() = {
    try {
       bar()
    } with Effect {
        def baz(msg, it) = resume(it)
     }
}

---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters)
        body: (expression_statement
            (block
                (expression_statement
                    (try_expression
                        block: (block
                            (expression_statement
                                (call_expression
                                    function: (identifier)
                                        arguments: (arguments))))
                        with_clause: (with_clause
                            name: (type_identifier)
                            block: (function_list
                                (function_item
                                    name: (identifier)
                                    parameters: (parameters
                                        (identifier)
                                        (identifier))
                                    body: (expression_statement
                                        (resume_expression
                                            value: (identifier))))))))))))
==================
try with annonymous handler function
==================
def foo() = {
    try {
    meanRatio(4.2, 1.3)
    } with Exc {
       (msg) =>  println(msg)
    }
}

---

(source_file
    (function_item
        name: (identifier)
        parameters: (parameters)
        body: (expression_statement
            (block
                (expression_statement
                    (try_expression
                        block: (block
                            (expression_statement
                                (call_expression
                                    function: (identifier)
                                        arguments: (arguments
                                            (float_literal)
                                            (float_literal)))))
                        with_clause: (with_clause
                            name: (type_identifier)
                            block: (block_argument
                                (parameters
                                    (identifier))
                                (call_expression
                                    function: (identifier)
                                        arguments: (arguments
                                            (identifier)))))))))))

==================
Pre-arg function call
==================

def foo(x: Double) = {
    x.ceil
}

---

(source_file
    (function_item
        name: (identifier)
        parameters: (parameters
            (parameter
                pattern: (identifier)
                type: (primitive_type)))
        body: (expression_statement
            (block
                (expression_statement
                    (field_expression
                        value: (identifier)
                        field: (field_identifier)))))))

==================
line comment
==================
// this is a comment
---
(source_file
  (comment))


==================
multiline comment
==================
/* */
/* This is a comment
*
*/

def foo() = <>

/* */
---
(source_file
    (comment)
    (comment)
    (function_item
        name: (identifier)
        parameters: (parameters)
        body: (expression_statement
            (hole)))
    (comment))


==================
While loop
==================
def foo() = {
    while (true) {
        println("Hello")
    }
}
---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters)
        body: (expression_statement
            (block
                (expression_statement
                (while_expression
                    condition: (boolean_literal)
                    block: (block
                        (expression_statement
                            (call_expression
                                function: (identifier)
                                arguments: (arguments
                                    (string_literal)))))))))))

==================
If expression
==================
def foo() = {
    if (true) {
        println("Hello")
    } if else (false) {
        def bar() = println("Goodbye")
    } else {
        println("Goodbye")
    }
}
---

(source_file
    (function_item
        name: (identifier)
        parameters: (parameters)
        body: (expression_statement
            (block
                (expression_statement
                    (if_expression
                        condition: (boolean_literal)
                        block: (block
                            (expression_statement
                                (call_expression
                                    function: (identifier)
                                    arguments: (arguments
                                        (string_literal)))))
                        if_else_clause: (if_else_clause
                            condition: (boolean_literal)
                            block: (block
                                (function_item
                                    name: (identifier)
                                    parameters: (parameters)
                                    body: (expression_statement
                                        (call_expression
                                        function: (identifier)
                                        arguments: (arguments
                                            (string_literal)))))))
                        else_clause: (else_clause
                            block: (block
                                (expression_statement
                                    (call_expression
                                        function: (identifier)
                                        arguments: (arguments
                                            (string_literal))))))))))))

==================
If and binary expression
==================

def pop() : Int = {
  if (something) {} else {}

  42333 + 1 * 2
}
---
(source_file
    (function_item
        name: (identifier)
        parameters: (parameters)
        return_type: (return_type
            type: (primitive_type))
        body: (expression_statement
            (block
                (expression_statement
                    (if_expression
                        condition: (identifier)
                        block: (block)
                        else_clause: (else_clause
                        block: (block))))
                (expression_statement
                    (binary_expression
                        left: (integer_literal)
                        right: (binary_expression
                            left: (integer_literal)
                            right: (integer_literal))))))))
